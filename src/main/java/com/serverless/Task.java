package com.serverless;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


import java.io.IOException;
import java.util.HashMap;
import java.util.List;



@DynamoDBTable(tableName = "Tasks")
public class Task {

    private static final String TASKS_TABLE_NAME = System.getenv("Tasks");

    private static DynamoDBAdapter dbAdapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private static final Logger LOG = LogManager.getLogger(Task.class);

    private String id;
    private String title;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "title")
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Task() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TASKS_TABLE_NAME))
                .build();
        // get the db adapter
        dbAdapter = DynamoDBAdapter.getInstance();
        this.client = dbAdapter.getDbClient();
        // create the mapper with config
        this.mapper = dbAdapter.createDbMapper(mapperConfig);
    }

    @Override
    public String toString() {
        return "Task{" +
                "id='" + id + '\'' +
                ", title='" + title + '\'' +
                '}';
    }

    public void save(Task task) throws IOException {
        this.mapper.save(task);
    }

    public Task get(String id) throws IOException {
        Task task = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Task> queryExp = new DynamoDBQueryExpression<Task>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Task> result = this.mapper.query(Task.class, queryExp);
        if (result.size() > 0) {
            task = result.get(0);
            LOG.info("Tasks - get(): task - " + task.toString());
        } else {
            LOG.info("Tasks - get(): task - Not Found.");
        }
        return task;
    }

    public List<Task> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Task> results = this.mapper.scan(Task.class, scanExp);
        for (Task p : results) {
            LOG.info("Task - list(): " + p.toString());
        }
        return results;
    }

    public Boolean delete(String id) throws IOException {
        Task task = null;

        // get product if exists
        task = get(id);
        if (task != null) {
            LOG.info("Tasks - delete(): " + task.toString());
            this.mapper.delete(task);
        } else {
            LOG.info("Tasks - delete(): product - does not exist.");
            return false;
        }
        return true;
    }
}
